function [] = getOSID_Portable(osinstallpath,subjosmod,subjosidset,subjosidxldset,subjosikmot,subjosidxldmot)
%% getOSID
% Do inverse dynamics (ID) using OpenSim
% 
% INPUT)
% osinstallpath : string - OpenSim installation path (e.g. C:\Program Files\OpenSim\OpenSim 3.3)
% subjosmod : string - name of the .osim file containing the subject specific
%             OpenSim model to use for the inverse dynamics.
% subjosidset : string - generic .xml setup file name for OpenSim inverse dynamics, with .xml extension
% subjosxldset : string - generic .xml external loads setup file name for OpenSim inverse dynamics, with .xml extension
% subjosikmot : string - name of the .mot file containing motion data, e.g. as
%               generated from the inverse kinematics.
% subjosxldmot : string - name of the .mot file containing external load
%               data, such as ground reaction forces and moments
% 
% OUTPUT)
% No direct output is supplied.
% The code generates 5-6 output files:
% - A trial specific .xml ID settings file
% - A trial specific .xml XLD settings file
% - An ID.sto file containing joint torques, expressed in joint coordaintes!
% - An IDf.sto file containing body forces expressed in ground coordinates
% - Two .log files
% IDout.log will contain the console output, IDerr.log is an error log.
% The error log will be deleted if it is empty.
% All files are stored in the same folder as the ID.xml settings file
% 
% NOTES)
% Before running this file, generic settings files should be created using
% OpenSim. The general ID settings file can be saved directly from the ID
% tool screen. The external load (xld) settings file should contain all
% force specifications, which should be the same for all trials (except the 
% input .mot file with the loads, which is adjusted in this code).
% All output files are stored in the folder where the subjosidset file is
% located. The filename of the IK.mot file is reused for naming of output
% files. 
% 
% It is assumed that the name of the subjosikmot file ends on IK.mot, 
% as generated by getOSIK.m
% 
% It is assumed that the subjosikmot file contains the time values in
% column 1, starting at row 12. If this is not the case you should adjust
% the indices in dlmread below.
% 
% If no full path is supplied the file is assumed present in the current folder.
% 
% Currently, this file is able to handle static external loads only (e.g.
% ground). The "kinematics for external loads" option is currently not
% supported. 
% 
% This code was tested with OpenSim 3.3

% Update history)
% 22-09-2015 : Mark Vlutters : file creation


%% Get some directories

% Extract output directory from ID.xml file 
if ~isempty(strfind(subjosidset,'\'))
    foo = strfind(subjosidset,'\');
    stofilepath = subjosidset(1:foo(end-1));
    xmlfilepath = subjosidset(1:foo(end));
else
    stofilepath = pwd;
    xmlfilepath = pwd;
end

% Extract general output file name from IK.mot file
if ~isempty(strfind(subjosikmot,'\'))
    foo = strfind(subjosikmot,'\');
    genfilename = regexprep(subjosikmot(foo(end)+1:end),'IK_IMU.mot','');
else
    genfilename = regexprep(subjosikmot,'IK_IMU.mot','');
end

%% Read and prepare external load settings

% Adjust external load input file
xmlXload = xmlread(subjosidxldset);
xmlXload.getElementsByTagName('datafile').item(0).setTextContent(subjosidxldmot);

% Write modified settings .xml file
xldsetFile = [xmlfilepath genfilename 'XLDset_Portable.xml'];
xmlwrite(xldsetFile,xmlXload);

%% Read and prepare general settings

% Open IK.mot and check data length
ikmotdata = dlmread(subjosikmot,'\t',11,0); % NOTE: zero indexing

% General ID Settings
xmlSet = xmlread(subjosidset);

% Modify settings to a trial specific one
xmlSet.getElementsByTagName('results_directory').item(0).setTextContent(stofilepath); % Output path
xmlSet.getElementsByTagName('model_file').item(0).setTextContent(subjosmod); % Model file
xmlSet.getElementsByTagName('time_range').item(0).setTextContent([num2str(ikmotdata(1,1)) ' ' num2str(ikmotdata(end,1))]);
xmlSet.getElementsByTagName('external_loads_file').item(0).setTextContent(xldsetFile); % External loads xml
xmlSet.getElementsByTagName('coordinates_file').item(0).setTextContent(subjosikmot); % IK.mot
xmlSet.getElementsByTagName('output_gen_force_file').item(0).setTextContent([genfilename 'ID_Portable.sto']); % Output name general force file
xmlSet.getElementsByTagName('joints_to_report_body_forces').item(0).setTextContent('All'); % Joint forces expressed in ground
xmlSet.getElementsByTagName('output_body_forces_file').item(0).setTextContent([genfilename 'IDf_Portable.sto']); % Output name joint force file

% Write modified settings .xml file
setFile = [xmlfilepath genfilename 'IDset_Portable.xml'];
xmlwrite(setFile,xmlSet);

%% Do inverse dynamics

% Send system command to perform ID using specific settings
disp(['Starting ID for ' genfilename]);
system(['"' osinstallpath '\bin\id.exe" -Setup ' setFile ' > nul']);
% NOTE: the > nul suppresses the window output

% Rename generic ID outputs and move them to the right folder
if ~ exist([stofilepath '\DataFiles\'],'dir')
    mkdir([stofilepath '\DataFiles\']);
end

if exist([stofilepath genfilename 'ID_Portable.sto'],'file')
    movefile([stofilepath genfilename 'ID_Portable.sto'],[stofilepath '\DataFiles\' genfilename 'ID_Portable.sto']); % Output log
end

if exist([stofilepath genfilename 'IDf_Portable.sto'],'file')
    movefile([stofilepath genfilename 'IDf_Portable.sto'],[stofilepath '\DataFiles\' genfilename 'IDf_Portable.sto']); % Output log
end


% Rename generic ID output log and move it to the right folder
if ~ exist([stofilepath '\Logs\'],'dir')
    mkdir([stofilepath '\Logs\']);
end

if exist('out.log','file')
    movefile('out.log',[stofilepath 'Logs\' genfilename 'IDout_Portable.log']); % Output log
end
if exist('err.log','file')
    
    % Check if error log is empty

    fid = fopen('err.log','r');
    if fid ~= -1
        foo = fread(fid);
        fclose(fid);
    else
        foo = true;
    end
    
    % Remove error log if empty, otherwise move and rename
    if isempty(foo)
        delete('err.log');
    else
        warning('getOSID:errors',['Please see ' genfilename 'IDerr.log']);
        movefile('err.log',[stofilepath 'Logs\' genfilename 'IDerr_Portable.log']); % Error log
    end
end

disp(['Finished ID for ' genfilename '. See .log file for details.' ]);


end